#!/usr/bin/perl

# Implements ctf(1), defined separately.

use strict;
use warnings FATAL => 'all';

use Data::Dumper;
use File::Basename qw(basename dirname);
use File::Compare;
use File::Find::Object;
use File::Spec::Functions; # catfile canonpath
use File::stat;
use Getopt::Long qw( :config bundling no_ignore_case require_order );
use IPC::Run qw(run);
use List::MoreUtils qw(any zip pairwise);
use Pod::Usage;
use Readonly;
#use Smart::Comments;
use YAML;

Readonly my $root => $< == 0;

Readonly my $DFLT_CF => $root ? "/etc/ctf/ctf.conf" : "$ENV{HOME}/.ctf.conf";
Readonly my @KNOWN_COMPS => qw(root home);
Readonly my %NOTATION => { home => '~', root => '/' };

my %conf = (
    lockpath => $root ? "/var/lib/ctf/lock" : "$ENV{HOME}/.ctf/lock",
    disablepath => $root ? "/var/lib/ctf/disable" : "ENV{HOME}/.ctf/disable",
);

my ($opt_cf,       $test,         $opt_pre,      $opt_no_pre,
    $opt_no_post,  $opt_safe,     $opt_content,  $opt_test,
    $opt_dry_run,  $opt_home_src, $opt_home_dst, $opt_root_src,
    $opt_root_dst, $opt_no_backups);

GetOptions(
    'c|config=s' => \$opt_cf,
    't|test' => \$test,
    'P|nopre' => \$opt_no_pre,
    'T|nopost' => \$opt_no_post,
    's|safe'     => \$opt_safe,
    'C|content=s' => \$opt_content,
    'n|dry-run' => \$opt_dry_run,     # --dry-run internal for devel
    'H|home-src=s' => \$opt_home_src,
    'I|home-dst=s' => \$opt_home_dst,
    'r|root-src=s' => \$opt_root_src,
    'R|root-dst=s' => \$opt_root_dst,
    'B|no-backups' => \$opt_no_backups,
    'h|help' => sub { pod2usage(-exitval => 0) },
) or pod2usage(-exitval => 64);

my $cdir = defined($opt_content) ? $opt_content
    : $root ? "/var/lib/ctf/content"
    :         "$ENV{HOME}/.ctf/content";

my $pre = (!$opt_safe and !$opt_no_pre);
my $post = (!$opt_safe and !$opt_no_post and !$opt_test);

my $do_load_cf = defined($opt_cf) || -f $DFLT_CF;

my $cfyaml = {};

if ($do_load_cf) {
    my $cf = $opt_cf // $DFLT_CF;

    # Currently relying on unspecified behaviour, that YAML will raise
    # an exception with a descriptive message if it can't load the file.
    # <https://rt.cpan.org/Public/Bug/Display.html?id=72571>
    $cfyaml = YAML::LoadFile($cf);

    # Allow twiddle-paths for relative to home directory in config file.
    for (qw(contentdir manifest lockpath disablepath)) {
        exists($cfyaml->{$_}) and $cfyaml->{$_} =~ s/^~/$ENV{HOME}/;
    }

    for (qw(lockpath disablepath)) {
        defined($cfyaml->{$_}) and $conf{$_} = $cfyaml->{$_};
    }
    defined($cfyaml->{contentdir}) and $cdir = $cfyaml->{contentdir};
}

Readonly my %comp_src => (
    root => $opt_root_src // $cfyaml->{root}{src} // canonpath("$cdir/root"),
    home => $opt_home_src // $cfyaml->{home}{src} // canonpath("$cdir/home"),
);

Readonly my %comp_dst => (
    root => $opt_root_dst // $cfyaml->{root}{dst} // '/',
    home => $opt_home_dst // $cfyaml->{home}{dst} // canonpath($ENV{HOME}),
);

# default
$conf{manifest} = catfile($cdir, "ctf.manifest");

if ($do_load_cf) {
    for (qw(manifest)) {
        defined($cfyaml->{$_}) and $conf{$_} = $cfyaml->{$_};
    }
}

# again, <https://rt.cpan.org/Public/Bug/Display.html?id=72571>
my $manifest;
eval {
    $manifest = YAML::LoadFile($conf{manifest});
};
if ($@) {
    my $explicitly_configured = defined($cfyaml->{manifest});
    if ($explicitly_configured) {
        die $@;
    }
    else {
        $manifest = [];
    }
}

my %mf_hash;
for (@$manifest) {
    my $path = $_->{path};
    defined($path) or fatl(78, $conf{manifest}
        . ": every entry in manifest must define path");
    defined($mf_hash{$path}) and fatl(78, $conf{manifest}
        . ": defined twice in manifest: $path\n");

    twiddle_expand($_, qw(pre post depends));

    $mf_hash{$path} = $_;
}

for my $k (keys %comp_src, keys %comp_dst) {
    if (! grep { $k eq $_ } @KNOWN_COMPS) {
        fatl(1, "unknown component: $k");
        # Okay but we should tell the user whether the bad data came from
        # the config file or a command line option.
    }
}

my %do_comps;

for my $comp (sort keys %comp_src) {
    # FIXME: Probably need to distinguish between explicitly conifgured 
    # ones, which should exist, and default values, which need not.
    # IOW, if I'm just managing my dotfiles under ~, I don't need to
    # have the input directory for the root component exist at all, but
    # if I've asked for root component to come from somewhere, then that
    # place should exist.  Summary of this comment needs to go into the
    # interface spec, after which most of it can be deleted!
    $do_comps{$comp} = -d $comp_src{$comp};
}

if (! any { -d } values %comp_src) {
    warn "no possible component dirs exist; "
        . "these are:\n";
    for (sort keys %comp_src) {
        warn $comp_src{$_} . "\n";
    }
    exit 100;
}

my @pfixes;

if (@ARGV) {
    @pfixes = @ARGV;
}
else {
    @pfixes = ("/");
}

my @files;
for my $pfix (@pfixes) {
    for my $comp (sort keys %comp_src) {
        my $dst_under_pfix = path_under($comp_dst{$comp}, $pfix);

        my $findpath_within_comp = defined($dst_under_pfix)
            ? "" 
            : path_under($pfix, $comp_dst{$comp});

        if ($do_comps{$comp} && defined($findpath_within_comp)) {

            my $findpath = canonpath("$comp_src{$comp}/$findpath_within_comp");
            
            my $tree = File::Find::Object->new({}, $findpath);

            while (my $p = $tree->next) {
                next if -d $p;
                if (-l $p) {
                    warn "repo components can not contain symlinks: $p\n";
                    exit 101;
                }
                if (! -f $p) {
                    warn "repo components can only contain regular files: $p\n";
                    exit 101;
                }

                my $path_within_comp = path_under($p, $comp_src{$comp});
                $path_within_comp // die;

                my $dstpath = canonpath("$comp_dst{$comp}/$path_within_comp");

                push @files, {
                   comp    => $comp,
                   dstpath => $dstpath,
                   srcpath => $p,
                };
            }
        }
    }
}

# %files will contain data about all the files we'll be looking at, keyed
# on dstpath (the destination path).  Note distinction between this and
# the source path, and the path as it would be declared in the manifest.
my %files;
for my $f (@files) {
    if (defined($files{$f->{dstpath}})) {
        fatl("$f->{dstpath} would be deployed from two places");
    }

    $files{$f->{dstpath}} = $f;
}

for my $path (keys %files) {

    # These get overwritten in the next block if the user has specified
    # no pre / post in the manifest.
    if ($files{"$path.prectf"}) {
        $files{$path}{pre} = ["$path.prectf"];
    }
    if ($files{"$path.postctf"}) {
        $files{$path}{post} = ["$path.postctf"];
    }
}

for my $file (@$manifest) {
    # FIXME: confirm present (unless selection excludes it).
    # warn if not.  Merge data.

    my $dstpath = mfpath_to_dst($file->{path}, \%comp_dst);

    if (defined($files{$dstpath})) {
        #$files{mfpath_to_dst($file)}{mfpath} = $file->{path};
        $files{$dstpath}{mfdata} = $file;


        # This allows the user to set pre/post, overriding implicit 
        # ones.  To say none, they can do "pre: ~" or "pre: []"
        for my $hook (qw(pre post)) {
            if (exists($file->{$hook})) {
                if (defined($file->{$hook})) {
                    # Is it single value supplied as scalar
                    if (ref($file->{$hook}) eq '') {

                        # FIXME: could warn if overwriting implicit one from
                        # earlier
                        $files{$dstpath}{$hook} = [ $file->{$hook} ];
                    }
                    elsif (ref($file->{$hook}) eq 'ARRAY') {
                        $files{$dstpath}{$hook} = $file->{$hook};
                    }
                }
                # User must have explicitly set it to undef, possibly to disable
                # an implicit one.
                else {
                    $files{$dstpath}{$hook} = [];
                }
            }
            map { s/^~/$ENV{HOME}/ } @{$files{$dstpath}{$hook}};
        }        

        for my $depattr (qw(pre post)) {
            if (defined($file->{$depattr})) {
                if (ref($file->{$depattr}) eq '') {
                    push @{ $files{$dstpath}{deps} }, $file->{$depattr};
                }
                elsif (ref($file->{$depattr}) eq 'ARRAY') {
                    push @{ $files{$dstpath}{deps} }, @{ $file->{$depattr} };
                }
                else {
                    die "bad $depattr data for $dstpath: "
                        . ref($files{$dstpath}{$depattr});
                }
            }
        }
        if (defined($file->{depends})) {
            if (ref($file->{depends}) eq '') {
                push @{ $files{$dstpath}{deps} }, $file->{depends};
            }
            elsif(ref($file->{depends}) eq 'ARRAY') {
                push @{ $files{$dstpath}{deps} }, @{$file->{depends}};
            }
            else { die }
        }
    }
    else {
        unless (@pfixes) {
            warn "in manifest but not content: $file->{path}\n";
        }
    }
}

my @updated;
my %done;

FILE: while (my ($k, $v) = each %files) {
        dofile($v, [], \%files, $test);
}

# dofile($f, $stack, $files, $test)
#   Deploy file $f, then deploy files $stack.  $files is the hashref
#   of info about all the files the program's looking at.  $test is a bool
#   indicating test mode.
#
#   Returns true on success, false on failure.
sub dofile {
    my ($file, $stack, $files, $test) = @_;

    if (defined($file->{done})) {
        return 1;
    }

    if (grep { $_->{dstpath} eq $file->{dstpath} } @$stack) {
        fatl(1, "dependency loop involving $file->{dstpath}");
    }

    if (ref($file->{deps}) eq 'ARRAY' and @{$file->{deps}}) {
        for my $dep (@{$file->{deps}}) {
            my $depdst = mfpath_to_dst($dep, \%comp_dst);
            ref($files->{$depdst}) eq 'HASH' 
                or die "$file->{dstpath}: missing dependency on $dep\n";
            dofile($files->{$depdst}, [@$stack, $file], $files);
        }
    }

    if (ref($file->{pre}) eq 'ARRAY') {
        for my $pre (@{$file->{pre}}) {
            if ($test) {
                warn "test mode; would execute: $pre\n";
            }
            else {
                # It should have already been installed, as a dep.
                warn "executing pre $pre\n";
                system($pre, $file->{dstpath}) and die;
                # FIXME: nicer error processing
            }
        }
    }

    # update, adding to @updated if changed
    my @rplc = qw(rplc -e);

    ($test or $opt_safe) and push @rplc, "-n";

    my $path_as_it_would_be_declared = filehash_to_manifest_path($file);

    my $mfe = $mf_hash{filehash_to_manifest_path($file)};

    ischange($file->{dstpath}, $file->{srcpath}, $mfe // {}) or return;

    if (defined($mfe)) {
        my %mfe = %{$mfe};
        defined($mfe{mode}) and push @rplc, "-m", $mfe{mode};
        defined($mfe{owner}) and push @rplc, "-o", $mfe{owner};
        defined($mfe{group}) and push @rplc, "-g", $mfe{group};

        if (defined($mfe{'text-encoding'}) && $mfe{'text-encoding'} eq 'none') {
            push @rplc, "--no-text";
        }

        if (!$opt_no_backups) {
            push @rplc, "-b", ($mfe{backup} // 
                dirname($file->{dstpath}) . "/." . basename($file->{dstpath}) 
                    . ".ctfprev");
        }
    }

    $opt_dry_run and push @rplc, "-n";

    push @rplc, $file->{dstpath};

    run([@rplc], '<', $file->{srcpath});

    # FIXME: check for failure

    my $ex = $?>>8;
    if (!($ex == 0 or $ex == 1)) {
        warn "rplc command was @rplc < $file->{srcpath}\n";
        fatl(1, "rplc exited: " . ($?>>8));
    }

    # Want to run postctf from here (subject to deps), so that we
    # have minimal unapplied config, and can easily back out if a
    # postctf fails.
    if (ref($file->{post}) eq 'ARRAY') {
        for my $post (@{$file->{post}}) {
            if ($test) {
                warn "test mode; would execute: $post\n";
            }
            else {
                # It should have already been installed, as a dep.
                warn "executing post $post\n";
                system($post, $file->{dstpath}) and die;
                # FIXME: nicer error processing
            }
        }
    }

    $file->{done} = 1;

    return;
}

sub filehash_to_manifest_path {
    my ($file) = @_;

    return canonpath(catfile(
            $NOTATION{$file->{comp}}, 
            path_under($file->{dstpath}, $comp_dst{$file->{comp}})
        )
    );
}

sub mfpath_to_dst {
    my ($file, $comp_dst) = @_;

    for my $k (keys %NOTATION) {
        my $v = $NOTATION{$k};
        if ($file =~ /^$v/) {
            my $notation_subst = $comp_dst->{$k};
            defined($notation_subst) 
                or fatl(1, "don't know component dst for $k");
            $file =~ s/^$v/$notation_subst/;
            $file = canonpath($file);
            return $file;
        }
    }
    die "unknown component notation: $file\n";
}

# If $lower is under $higher (on path strings alone, not on looking at
# the filesystem), then returns the path to reach $lower from $higher.
# Otherwise returns the empty list in list context, or undef in scalar
# context.
sub path_under {
    my ($lower, $higher) = @_;

    my @lower = split('/+', canonpath($lower));
    my @higher = split('/+', canonpath($higher));

    @lower < @higher and return;

# This was producing a warning 'Name "main::a" used only once: possible typo'
#    pairwise { defined($b) or return 1; $a eq $b or return; } @lower, @higher;

    for (my $i = 0; $i <= $#lower; $i++) {
        defined($higher[$i]) or return catfile(@lower[$i..$#lower]);
        $lower[$i] eq $higher[$i] or return;
    }

    return $lower[$#lower];
}


# Say we want to know the path, within each of the components,
# to /home/bob/foo.  Within root, it's /home/bob/foo.  Within home
# it's foo.
# XX: never finished implementing, and it's unused.  Remove?
sub path_to_pfix_within_comp {
    my ($path, $comp, $comp_dst) = @_;

    if (!is_under($path, $comp_dst->{$comp})) {
        die;
    }

    
}

# It would be less code to let rplc do all this work, but the program
# was taking ~ 1 sec just for a few tens of files, so this is a 
# worthwhile optimisation.  Plus we don't cause so many writes, which
# has other advantages.
sub ischange {
    my ($path, $replacementpath, $meta) = @_;

    -f $path or return 1;

    defined(my $st = stat($path)) or fatl("$!: $path");

    if (defined($meta->{mode}) && oct($meta->{mode}) != ($st->mode & 07777)) {
        return 1;
    }
    
    if (defined($meta->{owner})) {
        my $uid = getpwnam($meta->{owner});
        defined($uid) or fatl("$meta->{owner}: $!");
        $uid == $st->uid or return 1;
    }

    if (defined($meta->{group})) {
        defined(my $gid = getgrnam($meta->{group})) 
            or fatl("$meta->{group}: $!");
        $gid == $st->gid or return 1;
    }

    compare($path, $replacementpath) and return 1;

    return;
}

sub fatl {
    my ($exit, @msg) = @_;

    print STDERR "ctf: fatal: ", @msg, "\n";
    exit $exit;
}

# twiddle_expand($hash, $keys)
#   Expands the values of $hash determined by $keys replacing a ~ at
#   the start with the user's home directory.  The values can be
#   scalars or lists.  Changes its input.
sub twiddle_expand {
    my ($h, @k) = @_;

    for (@k) {
        if (exists($h->{$_})) {
            for ((ref($h->{$_}) eq 'ARRAY') ? @{$h->{$_}} : ($h->{$_})) {
                s/^~/$ENV{HOME}/;
            }
        }
    }
}

# FIXME
# - what to do if two components end up specifying the same file
#   differently, eg ~/foo and /home/alice/foo.
# - validate all properties in the manifest?  Catches errors, but may
#   reduce extensibility for other apps
# - may still be too fragile with binary files, eg a vim .swp file was
#   lying around, this made it fall over.  Maybe if diff exits 2, use
#   cmp instead
# - need to think about how failures of pre / posts / rplcs
#   are handled, including wrt deps and backing out.
#   Probably requires redoing so that the deps tree is calculated at
#   the start and consists of explicit references.


=head1 NAME ctf - deploy configuration files

Please see separate definition of interface in doc/ctf; this POD
is only here for pod2usage's sake to easily generate help text.

=head1 SYNOPSIS

  ctf [OPTIONS] [PATH ...]

  Deploy config files under PATHs, or all if no PATH is given.

  OPTIONS
  -c,--content=DIR   Specify content directory
  -t,--test          Report changes and run prectf programs
  -P,--nopre         Don't execute prectf programs
  -T,--nopost        Don't execute postctf programs
  -s,--safe          Report changes without executing any repo content (-tP)
  -C,--content=DIR   Specify top level content directory
  -H,--home-src=DIR  Where to get home directory files from
  -I,--home-dst=DIR  Where to install home directory files to
  -r,--root-src=DIR  Where to get root directory files from
  -R,--root-dst=DIR  Where to install root directory files to
  -B,--no-backups    Don't take any backup copies of files
  -h,--help          Display this help text
